// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using souschef_be.models;
using souschef_core.Model;

#nullable disable

namespace souschef_be.Migrations
{
    [DbContext(typeof(SouschefContext))]
    [Migration("20240813215107_Passwords")]
    partial class Passwords
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "measure_type", new[] { "volume", "weight", "unit" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("souschef_core.Model.Access", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint")
                        .HasColumnName("recipe_id");

                    b.Property<bool?>("Comment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("comment");

                    b.Property<bool?>("Edit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("edit");

                    b.Property<bool?>("View")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("view");

                    b.HasKey("UserId", "RecipeId")
                        .HasName("access_pkey");

                    b.HasIndex("RecipeId");

                    b.ToTable("access", (string)null);
                });

            modelBuilder.Entity("souschef_core.Model.Comment", b =>
                {
                    b.Property<string>("Comment1")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<long?>("RecipeId")
                        .HasColumnType("bigint")
                        .HasColumnName("recipe_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("souschef_core.Model.IngrRecipe", b =>
                {
                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint")
                        .HasColumnName("recipe_id");

                    b.Property<long>("IngrId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingr_id");

                    b.Property<long?>("Measurement")
                        .HasColumnType("bigint")
                        .HasColumnName("measurement");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<string>("Section")
                        .HasColumnType("text")
                        .HasColumnName("section");

                    b.HasKey("RecipeId", "IngrId")
                        .HasName("ingr_recipe_pkey");

                    b.HasIndex("IngrId");

                    b.HasIndex("Measurement");

                    b.ToTable("ingr_recipe", (string)null);
                });

            modelBuilder.Entity("souschef_core.Model.Ingredient", b =>
                {
                    b.Property<long>("IngrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ingr_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IngrId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("citext")
                        .HasColumnName("name");

                    b.Property<List<long>>("Tags")
                        .HasColumnType("bigint[]")
                        .HasColumnName("tags");

                    b.HasKey("IngrId")
                        .HasName("ingredients_pkey");

                    b.HasIndex(new[] { "Name" }, "ingredients_name_key")
                        .IsUnique();

                    b.ToTable("ingredients", (string)null);
                });

            modelBuilder.Entity("souschef_core.Model.Measurement", b =>
                {
                    b.Property<long>("MeasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("meas_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("MeasId"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<MeasureType>("Type")
                        .HasColumnType("measure_type")
                        .HasColumnName("type");

                    b.Property<decimal>("UnitMeasure")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_measure");

                    b.HasKey("MeasId")
                        .HasName("measurements_pkey");

                    b.ToTable("measurements", (string)null);
                });

            modelBuilder.Entity("souschef_core.Model.Message", b =>
                {
                    b.Property<long>("MsgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MsgId"));

                    b.Property<string>("MsgText")
                        .HasColumnType("text");

                    b.HasKey("MsgId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("souschef_core.Model.Note", b =>
                {
                    b.Property<string>("Note1")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<long?>("RecipeId")
                        .HasColumnType("bigint")
                        .HasColumnName("recipe_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("notes", (string)null);
                });

            modelBuilder.Entity("souschef_core.Model.Rating", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint")
                        .HasColumnName("recipe_id");

                    b.Property<int?>("Rating1")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.HasKey("UserId", "RecipeId")
                        .HasName("ratings_pkey");

                    b.HasIndex("RecipeId");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("souschef_core.Model.Recipe", b =>
                {
                    b.Property<long>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("recipe_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("RecipeId"));

                    b.Property<long?>("Author")
                        .HasColumnType("bigint")
                        .HasColumnName("author");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Directions")
                        .HasColumnType("text")
                        .HasColumnName("directions");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool?>("Public")
                        .HasColumnType("boolean")
                        .HasColumnName("public");

                    b.Property<List<long>>("Tags")
                        .HasColumnType("bigint[]")
                        .HasColumnName("tags");

                    b.HasKey("RecipeId")
                        .HasName("recipes_pkey");

                    b.HasIndex("Author");

                    b.ToTable("recipes", (string)null);
                });

            modelBuilder.Entity("souschef_core.Model.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("roles_pkey");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("souschef_core.Model.Tag", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("TagId"));

                    b.Property<string>("TagName")
                        .HasColumnType("text")
                        .HasColumnName("tag_name");

                    b.HasKey("TagId")
                        .HasName("tags_pkey");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("souschef_core.Model.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("UserId"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("HashedPass")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pw_hash");

                    b.Property<string>("Lastname")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea")
                        .HasColumnName("photo");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "DisplayName" }, "users_display_name_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "users_username_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("souschef_core.Model.UserRole", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("RoleId", "UserId")
                        .HasName("user_role_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("souschef_core.Model.Access", b =>
                {
                    b.HasOne("souschef_core.Model.Recipe", "Recipe")
                        .WithMany("Accesses")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("access_recipe_id_fkey");

                    b.HasOne("souschef_core.Model.User", "User")
                        .WithMany("Accesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("access_user_id_fkey");

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("souschef_core.Model.Comment", b =>
                {
                    b.HasOne("souschef_core.Model.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("comments_recipe_id_fkey");

                    b.HasOne("souschef_core.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("comments_user_id_fkey");

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("souschef_core.Model.IngrRecipe", b =>
                {
                    b.HasOne("souschef_core.Model.Ingredient", "Ingr")
                        .WithMany("IngrRecipes")
                        .HasForeignKey("IngrId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("ingr_recipe_ingr_id_fkey");

                    b.HasOne("souschef_core.Model.Measurement", "MeasurementNavigation")
                        .WithMany("IngrRecipes")
                        .HasForeignKey("Measurement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("ingr_recipe_measurement_fkey");

                    b.HasOne("souschef_core.Model.Recipe", "Recipe")
                        .WithMany("IngrRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ingr_recipe_recipe_id_fkey");

                    b.Navigation("Ingr");

                    b.Navigation("MeasurementNavigation");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("souschef_core.Model.Note", b =>
                {
                    b.HasOne("souschef_core.Model.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("notes_recipe_id_fkey");

                    b.HasOne("souschef_core.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("notes_user_id_fkey");

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("souschef_core.Model.Rating", b =>
                {
                    b.HasOne("souschef_core.Model.Recipe", "Recipe")
                        .WithMany("Ratings")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ratings_recipe_id_fkey");

                    b.HasOne("souschef_core.Model.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ratings_user_id_fkey");

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("souschef_core.Model.Recipe", b =>
                {
                    b.HasOne("souschef_core.Model.User", "AuthorNavigation")
                        .WithMany("Recipes")
                        .HasForeignKey("Author")
                        .HasConstraintName("recipes_author_fkey");

                    b.Navigation("AuthorNavigation");
                });

            modelBuilder.Entity("souschef_core.Model.UserRole", b =>
                {
                    b.HasOne("souschef_core.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_user_fkey");

                    b.HasOne("souschef_core.Model.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_role_fkey");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("souschef_core.Model.Ingredient", b =>
                {
                    b.Navigation("IngrRecipes");
                });

            modelBuilder.Entity("souschef_core.Model.Measurement", b =>
                {
                    b.Navigation("IngrRecipes");
                });

            modelBuilder.Entity("souschef_core.Model.Recipe", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("IngrRecipes");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("souschef_core.Model.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("souschef_core.Model.User", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("Ratings");

                    b.Navigation("Recipes");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
